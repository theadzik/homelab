- name: Create git directory.
  ansible.builtin.file:
    path: "{{ git_dir }}"
    state: directory
    mode: '0755'

- name: Clone my repositories.
  ansible.builtin.git:
    repo: "git@github.com:theadzik/{{ item }}.git"
    dest: "{{ git_dir }}/{{ item }}"
    update: false
  loop: "{{ repositories }}"

- name: Download ssl_libs packages.
  ansible.builtin.get_url:
    url: http://security.ubuntu.com/ubuntu/pool/main/o/openssl/{{ item }}
    dest: "{{ downloads_dir }}/{{ item }}"
  loop: "{{ ssl_libs }}"
  register: downloaded_ssl_libs

- name: Install ssl_libs packages.
  ansible.builtin.apt:
    deb: "{{ downloads_dir }}/{{ item }}"
  loop: "{{ ssl_libs }}"
  become: true
  when: downloaded_ssl_libs.changed

- name: Check latest git-crypt.
  uri:
    url: https://api.github.com/repos/AGWA/git-crypt/releases/latest
    return_content: true
  register: gitcrypt_latest

- name: Create git-crypt version file.
  ansible.builtin.copy:
    content: ""
    dest: "{{ downloads_dir }}/git-crypt-{{ gitcrypt_latest.json.name }}"
    force: false
  register: gitcrypt_version

- name: Download git-crypt.
  loop: "{{ gitcrypt_latest.json.assets }}"
  loop_control:
    label: "{{ item.name }}"
    break_when: "'linux-x86_64' in item.name"
  when: "gitcrypt_version.changed and 'linux-x86_64' in item.name"
  ansible.builtin.get_url:
    url: "{{ item.browser_download_url }}"
    dest: /usr/bin/git-crypt
    mode: "755"
  become: true

- name: Install pipx packages.
  community.general.pipx:
    name: "{{ item }}"
  loop:
    - detect-secrets
    - pre-commit

- name: Ensure pre-commit dependencies are present.
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop:
    - ruby-dev
    - shellcheck
  become: true

- name: Check latest hadolint.
  uri:
    url: https://api.github.com/repos/hadolint/hadolint/releases/latest
    return_content: true
  register: hadolint_latest

- name: Create hadolint version file.
  ansible.builtin.copy:
    content: ""
    dest: "{{ downloads_dir }}/hadolint-{{ hadolint_latest.json.name }}"
    force: false
  register: hadolint_version

- name: Download hadolint.
  loop: "{{ hadolint_latest.json.assets }}"
  loop_control:
    label: "{{ item.name }}"
    break_when: "'Linux-x86_64' in item.name"
  when: "hadolint_version.changed and 'Linux-x86_64' in item.name"
  ansible.builtin.get_url:
    url: "{{ item.browser_download_url }}"
    dest: /usr/bin/hadolint
    mode: "755"
  become: true
