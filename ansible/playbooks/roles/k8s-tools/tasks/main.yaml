---
- name: Get latest kubectl version.
  uri:
    url: https://dl.k8s.io/release/stable.txt
    return_content: yes
  register: version

- name: Create kubectl versioned directory.
  file:
    path: /opt/kubectl-{{ version.content }}
    state: directory
  become: true
  register: kubectl_directory

- block:
  - name: Download the latest kubectl release.
    uri:
      url: https://dl.k8s.io/release/{{ version.content }}/bin/linux/amd64/kubectl
      dest: /opt/kubectl-{{ version.content }}
    register: kubectl
    become: true

  - name: Download the kubectl checksum.
    uri:
      url: https://dl.k8s.io/release/{{ version.content }}/bin/linux/amd64/kubectl.sha256
      dest: /opt/kubectl-{{ version.content }}
    register: kubectl
    become: true

  - name: Get kubectl sha256sum.
    shell: sha256sum /opt/kubectl-{{ version.content }}/kubectl | cut -d " " -f1
    register: file_shasum

  - set_fact:
      shasum1={{ file_shasum.stdout }}

  - debug: var=shasum1
    run_once: true

  - name: Get sha256sum value from file.
    command: cat /opt/kubectl-{{ version.content }}/kubectl.sha256
    register: downloaded_shasum

  - set_fact:
      shasum2={{ downloaded_shasum.stdout }}

  - debug: var=shasum2
    run_once: true

  - name: Assert that the kubectl binary is OK.
    assert:
      that:
        - file_shasum.stdout == downloaded_shasum.stdout
      fail_msg: "Shasum does not correspond"
      success_msg: "kubectl shasum verified: ok"

  - name: Change kubectl file permission.
    file:
      path: "/opt/kubectl-{{ version.content }}/kubectl"
      mode: '0755'
    become: true

  - name: Create a symlink to kubectl.
    file:
      src: "/opt/kubectl-{{ version.content }}/kubectl"
      dest: "/usr/bin/kubectl"
      state: link
    become: true
  when: kubectl_directory.changed

- name: Check latest k9s.
  uri:
    url: https://api.github.com/repos/derailed/k9s/releases/latest
    return_content: true
  register: k9s_latest

- name: Download k9s.
  loop: "{{ k9s_latest.json.assets }}"
  loop_control:
    label: "{{ item.name }}"
    break_when: "'k9s_Linux_amd64.tar.gz' in item.name"
  when: "'k9s_Linux_amd64.tar.gz' in item.name"
  ansible.builtin.unarchive:
    remote_src: true
    keep_newer: yes
    src: "{{ item.browser_download_url }}"
    dest: /usr/bin
    mode: "755"
    extra_opts:
      - k9s
  become: true

- name: Fetch helm install script.
  ansible.builtin.uri:
    url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    return_content: yes
  register: helm_installer

- name: Run helm_installer install script.
  ansible.builtin.shell:
    cmd: bash -s --
    stdin: "{{ helm_installer.content }}"
    creates: "/usr/local/bin/helm"
